--- a/src/main.c
+++ b/src/main.c
@@ -362,9 +362,12 @@ main (int argc, char *argv[])
 #endif
 	             );
 
+	nm_log_info (LOGD_CORE, "DEBUG: Starting: Auth manager setup");
 	nm_auth_manager_setup (nm_config_get_auth_polkit (config));
 
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: Auth manager setup");
 	nm_manager_setup ();
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: NM manager setup");
 
 	if (!nm_bus_manager_get_connection (nm_bus_manager_get ())) {
 		nm_log_warn (LOGD_CORE, "Failed to connect to D-Bus; only private bus is available");
@@ -375,13 +378,16 @@ main (int argc, char *argv[])
 			goto done;
 		}
 	}
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: dbus setup");
 
 	/* Set up platform interaction layer */
 	nm_linux_platform_setup ();
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: linux platform setup");
 
 	NM_UTILS_KEEP_ALIVE (config, NM_PLATFORM_GET, "NMConfig-depends-on-NMPlatform");
 
 	nm_dispatcher_init ();
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: nm dispatcher setup");
 
 	g_signal_connect (nm_manager_get (), NM_MANAGER_CONFIGURE_QUIT, G_CALLBACK (manager_configure_quit), config);
 
--- a/src/nm-manager.c
+++ b/src/nm-manager.c
@@ -2034,6 +2034,8 @@ factory_device_added_cb (NMDeviceFactory
 
 	if (nm_device_realize_start (device, NULL, NULL, &error)) {
 		add_device (self, device, NULL);
+		_LOGD (LOGD_DEVICE, "(%s): NM: Adding device from factory CB",
+		       nm_device_get_iface (device));
 		_device_realize_finish (self, device, NULL);
 	} else {
 		_LOGW (LOGD_DEVICE, "(%s): failed to realize device: %s",
@@ -2160,6 +2162,8 @@ platform_link_added (NMManager *self,
 			nm_device_set_nm_plugin_missing (device, TRUE);
 		if (nm_device_realize_start (device, plink, NULL, &error)) {
 			add_device (self, device, NULL);
+			_LOGD (LOGD_DEVICE, "(%s): NM: Adding device from platform-link",
+		       		nm_device_get_iface (device));
 			_device_realize_finish (self, device, plink);
 		} else {
 			_LOGW (LOGD_DEVICE, "%s: failed to realize device: %s",
@@ -5472,14 +5476,19 @@ nm_manager_setup (void)
 
 	g_return_val_if_fail (!singleton_instance, singleton_instance);
 
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: singleton_instance is NULL");
 	self = g_object_new (NM_TYPE_MANAGER, NULL);
-	nm_assert (NM_IS_MANAGER (self));
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: new object is created");
+	//nm_assert (NM_IS_MANAGER (self));
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: assertion successful");
 	singleton_instance = self;
 
 	nm_singleton_instance_register ();
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: registration successful");
 	_LOGD (LOGD_CORE, "setup %s singleton (%p)", "NMManager", singleton_instance);
 
 	nm_exported_object_export ((NMExportedObject *) self);
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: export successful");
 
 	return self;
 }
--- a/src/nm-exported-object.c
+++ b/src/nm-exported-object.c
@@ -293,7 +293,9 @@ nm_exported_object_class_add_interface (
 	while ((method_name = va_arg (ap, const char *)) && (impl = va_arg (ap, GCallback))) {
 		method.dbus_skeleton_type = dbus_skeleton_type;
 		method.method_name = nm_exported_object_skeletonify_method_name (method_name);
+	        nm_log_info (LOGD_CORE, "DEBUG: NM manager: method parsing : %s", method_name);
 		g_assert (g_signal_lookup (method.method_name, dbus_skeleton_type) != 0);
+	        nm_log_info (LOGD_CORE, "DEBUG: NM manager: method %s passed", method_name);
 		method.impl = impl;
 
 		g_array_append_val (classinfo->methods, method);
