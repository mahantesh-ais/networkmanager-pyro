--- a/src/main.c
+++ b/src/main.c
@@ -362,9 +362,12 @@ main (int argc, char *argv[])
 #endif
 	             );
 
+	nm_log_info (LOGD_CORE, "DEBUG: Starting: Auth manager setup");
 	nm_auth_manager_setup (nm_config_get_auth_polkit (config));
 
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: Auth manager setup");
 	nm_manager_setup ();
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: NM manager setup");
 
 	if (!nm_bus_manager_get_connection (nm_bus_manager_get ())) {
 		nm_log_warn (LOGD_CORE, "Failed to connect to D-Bus; only private bus is available");
@@ -375,13 +378,16 @@ main (int argc, char *argv[])
 			goto done;
 		}
 	}
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: dbus setup");
 
 	/* Set up platform interaction layer */
 	nm_linux_platform_setup ();
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: linux platform setup");
 
 	NM_UTILS_KEEP_ALIVE (config, NM_PLATFORM_GET, "NMConfig-depends-on-NMPlatform");
 
 	nm_dispatcher_init ();
+	nm_log_info (LOGD_CORE, "DEBUG: Finished: nm dispatcher setup");
 
 	g_signal_connect (nm_manager_get (), NM_MANAGER_CONFIGURE_QUIT, G_CALLBACK (manager_configure_quit), config);
 
--- a/src/nm-manager.c
+++ b/src/nm-manager.c
@@ -2034,6 +2034,8 @@ factory_device_added_cb (NMDeviceFactory
 
 	if (nm_device_realize_start (device, NULL, NULL, &error)) {
 		add_device (self, device, NULL);
+		_LOGD (LOGD_DEVICE, "(%s): NM: Adding device from factory CB",
+		       nm_device_get_iface (device));
 		_device_realize_finish (self, device, NULL);
 	} else {
 		_LOGW (LOGD_DEVICE, "(%s): failed to realize device: %s",
@@ -2160,6 +2162,8 @@ platform_link_added (NMManager *self,
 			nm_device_set_nm_plugin_missing (device, TRUE);
 		if (nm_device_realize_start (device, plink, NULL, &error)) {
 			add_device (self, device, NULL);
+			_LOGD (LOGD_DEVICE, "(%s): NM: Adding device from platform-link",
+		       		nm_device_get_iface (device));
 			_device_realize_finish (self, device, plink);
 		} else {
 			_LOGW (LOGD_DEVICE, "%s: failed to realize device: %s",
@@ -2269,9 +2273,13 @@ rfkill_manager_rfkill_changed_cb (NMRfki
 const GSList *
 nm_manager_get_devices (NMManager *manager)
 {
+	NMManager *self = manager;
+	NMManagerPrivate *priv = NM_MANAGER_GET_PRIVATE (self);
+	_LOGI (LOGD_CORE, "NMDEBUSS: checking manager ");
 	g_return_val_if_fail (NM_IS_MANAGER (manager), NULL);
+	_LOGI (LOGD_CORE, "NMDEBUSS: returning device list of length %d", g_slist_length(priv->devices));
 
-	return NM_MANAGER_GET_PRIVATE (manager)->devices;
+	return priv->devices;
 }
 
 static NMDevice *
@@ -5472,14 +5480,19 @@ nm_manager_setup (void)
 
 	g_return_val_if_fail (!singleton_instance, singleton_instance);
 
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: singleton_instance is NULL");
 	self = g_object_new (NM_TYPE_MANAGER, NULL);
-	nm_assert (NM_IS_MANAGER (self));
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: new object is created");
+	//nm_assert (NM_IS_MANAGER (self));
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: assertion successful");
 	singleton_instance = self;
 
 	nm_singleton_instance_register ();
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: registration successful");
 	_LOGD (LOGD_CORE, "setup %s singleton (%p)", "NMManager", singleton_instance);
 
 	nm_exported_object_export ((NMExportedObject *) self);
+	nm_log_info (LOGD_CORE, "DEBUG: NM manager: export successful");
 
 	return self;
 }
--- a/src/nm-exported-object.c
+++ b/src/nm-exported-object.c
@@ -293,7 +293,9 @@ nm_exported_object_class_add_interface (
 	while ((method_name = va_arg (ap, const char *)) && (impl = va_arg (ap, GCallback))) {
 		method.dbus_skeleton_type = dbus_skeleton_type;
 		method.method_name = nm_exported_object_skeletonify_method_name (method_name);
+	        nm_log_info (LOGD_CORE, "DEBUG: NM manager: method parsing : %s", method_name);
 		g_assert (g_signal_lookup (method.method_name, dbus_skeleton_type) != 0);
+	        nm_log_info (LOGD_CORE, "DEBUG: NM manager: method %s passed", method_name);
 		method.impl = impl;
 
 		g_array_append_val (classinfo->methods, method);
--- a/src/devices/nm-device.c
+++ b/src/devices/nm-device.c
@@ -5295,7 +5295,7 @@ act_stage3_ip4_config_start (NMDevice *s
 	    && priv->is_master
 	    && !priv->carrier) {
 		_LOGI (LOGD_IP4 | LOGD_DEVICE,
-		       "IPv4 config waiting until carrier is on");
+		       "IPv4 config waiting until carrier is on for %s", priv->iface);
 		return NM_ACT_STAGE_RETURN_WAIT;
 	}
 
@@ -5309,7 +5309,7 @@ act_stage3_ip4_config_start (NMDevice *s
 
 		if (ready_slaves == FALSE) {
 			_LOGI (LOGD_DEVICE | LOGD_IP4,
-			       "IPv4 config waiting until slaves are ready");
+			       "IPv4 config waiting until slaves are ready for %s", priv->iface);
 			return NM_ACT_STAGE_RETURN_WAIT;
 		}
 	}
@@ -5318,11 +5318,16 @@ act_stage3_ip4_config_start (NMDevice *s
 	priv->dhcp4.num_tries_left = DHCP_NUM_TRIES_MAX;
 
 	/* Start IPv4 addressing based on the method requested */
-	if (strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_AUTO) == 0)
+	if (strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_AUTO) == 0) {
+		_LOGI (LOGD_DEVICE, "NMDEBUG: ip4 config method: auto for %s", priv->iface);
 		ret = dhcp4_start (self, connection, reason);
-	else if (strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL) == 0)
+	}
+	else if (strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_LINK_LOCAL) == 0) {
+		_LOGI (LOGD_DEVICE, "NMDEBUG: ip4 config method: link local for %s", priv->iface);
 		ret = ipv4ll_start (self, reason);
+	}
 	else if (strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_MANUAL) == 0) {
+		_LOGI (LOGD_DEVICE, "NMDEBUG: ip4 config method: manual for %s", priv->iface);
 		NMIP4Config **configs, *config;
 
 		config = nm_ip4_config_new (nm_device_get_ip_ifindex (self));
@@ -5335,6 +5340,7 @@ act_stage3_ip4_config_start (NMDevice *s
 		ipv4_dad_start (self, configs, ipv4_manual_method_apply);
 		ret = NM_ACT_STAGE_RETURN_POSTPONE;
 	} else if (strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_SHARED) == 0) {
+		_LOGI (LOGD_DEVICE, "NMDEBUG: ip4 config method: shared for %s", priv->iface);
 		*out_config = shared4_new_config (self, connection, reason);
 		if (*out_config) {
 			priv->dnsmasq_manager = nm_dnsmasq_manager_new (nm_device_get_ip_iface (self));
@@ -5344,9 +5350,10 @@ act_stage3_ip4_config_start (NMDevice *s
 	} else if (strcmp (method, NM_SETTING_IP4_CONFIG_METHOD_DISABLED) == 0) {
 		apply_mtu_from_config (self);
 		/* Nothing else to do... */
+		_LOGI (LOGD_DEVICE, "NMDEBUG: ip4 config method disabled for %s", priv->iface);
 		ret = NM_ACT_STAGE_RETURN_STOP;
 	} else
-		_LOGW (LOGD_IP4, "unhandled IPv4 config method '%s'; will fail", method);
+		_LOGW (LOGD_IP4, "unhandled IPv4 config method '%s' for %s; will fail", method, priv->iface);
 
 	return ret;
 }
@@ -6743,22 +6750,27 @@ nm_device_activate_stage3_ip4_start (NMD
 	NMDeviceStateReason reason = NM_DEVICE_STATE_REASON_NONE;
 	NMIP4Config *ip4_config = NULL;
 
+	_LOGI (LOGD_DEVICE, "NMDEBUG: stage 3 starting for %s", priv->iface);
 	g_assert (priv->ip4_state == IP_WAIT);
 
 	priv->ip4_state = IP_CONF;
 	ret = NM_DEVICE_GET_CLASS (self)->act_stage3_ip4_config_start (self, &ip4_config, &reason);
 	if (ret == NM_ACT_STAGE_RETURN_SUCCESS) {
 		g_assert (ip4_config);
+		_LOGI (LOGD_DEVICE, "NMDEBUG: stage 3 schedule ip4 config result for %s", priv->iface);
 		nm_device_activate_schedule_ip4_config_result (self, ip4_config);
 		g_object_unref (ip4_config);
 	} else if (ret == NM_ACT_STAGE_RETURN_FAILURE) {
+		_LOGI (LOGD_DEVICE, "NMDEBUG: stage 3 activation failed for %s", priv->iface);
 		nm_device_state_changed (self, NM_DEVICE_STATE_FAILED, reason);
 		return FALSE;
 	} else if (ret == NM_ACT_STAGE_RETURN_STOP) {
 		/* Early finish */
+		_LOGI (LOGD_DEVICE, "NMDEBUG: stage 3 early finish for %s", priv->iface);
 		priv->ip4_state = IP_FAIL;
 	} else if (ret == NM_ACT_STAGE_RETURN_WAIT) {
 		/* Wait for something to try IP config again */
+		_LOGI (LOGD_DEVICE, "NMDEBUG: stage 3 ip wait for %s", priv->iface);
 		priv->ip4_state = IP_WAIT;
 	} else
 		g_assert (ret == NM_ACT_STAGE_RETURN_POSTPONE);
--- a/src/nm-ip4-config.c
+++ b/src/nm-ip4-config.c
@@ -540,8 +540,8 @@ nm_ip4_config_create_setting (const NMIP
 
 	if (!config) {
 		g_object_set (s_ip4,
-		              NM_SETTING_IP_CONFIG_METHOD, NM_SETTING_IP4_CONFIG_METHOD_DISABLED,
-		              NULL);
+	        	      NM_SETTING_IP_CONFIG_METHOD, NM_SETTING_IP4_CONFIG_METHOD_AUTO,
+	        	      NULL);
 		return NM_SETTING (s_ip4);
 	}
 
@@ -586,7 +586,7 @@ nm_ip4_config_create_setting (const NMIP
 
 	/* Use 'disabled' if the method wasn't previously set */
 	if (!method)
-		method = NM_SETTING_IP4_CONFIG_METHOD_DISABLED;
+		method = NM_SETTING_IP4_CONFIG_METHOD_AUTO;
 
 	g_object_set (s_ip4,
 	              NM_SETTING_IP_CONFIG_METHOD, method,
